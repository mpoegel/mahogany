// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: update_service.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UpdateService_RegisterManifest_FullMethodName = "/sequoia.UpdateService/RegisterManifest"
	UpdateService_ReleaseStream_FullMethodName    = "/sequoia.UpdateService/ReleaseStream"
)

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	RegisterManifest(ctx context.Context, in *RegisterManifestRequest, opts ...grpc.CallOption) (*RegisterManifestResponse, error)
	ReleaseStream(ctx context.Context, in *ReleaseStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseStreamResponse], error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) RegisterManifest(ctx context.Context, in *RegisterManifestRequest, opts ...grpc.CallOption) (*RegisterManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterManifestResponse)
	err := c.cc.Invoke(ctx, UpdateService_RegisterManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) ReleaseStream(ctx context.Context, in *ReleaseStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReleaseStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UpdateService_ServiceDesc.Streams[0], UpdateService_ReleaseStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReleaseStreamRequest, ReleaseStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_ReleaseStreamClient = grpc.ServerStreamingClient[ReleaseStreamResponse]

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility.
type UpdateServiceServer interface {
	RegisterManifest(context.Context, *RegisterManifestRequest) (*RegisterManifestResponse, error)
	ReleaseStream(*ReleaseStreamRequest, grpc.ServerStreamingServer[ReleaseStreamResponse]) error
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUpdateServiceServer struct{}

func (UnimplementedUpdateServiceServer) RegisterManifest(context.Context, *RegisterManifestRequest) (*RegisterManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterManifest not implemented")
}
func (UnimplementedUpdateServiceServer) ReleaseStream(*ReleaseStreamRequest, grpc.ServerStreamingServer[ReleaseStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReleaseStream not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}
func (UnimplementedUpdateServiceServer) testEmbeddedByValue()                       {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	// If the following call pancis, it indicates UnimplementedUpdateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_RegisterManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).RegisterManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UpdateService_RegisterManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).RegisterManifest(ctx, req.(*RegisterManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_ReleaseStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleaseStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateServiceServer).ReleaseStream(m, &grpc.GenericServerStream[ReleaseStreamRequest, ReleaseStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UpdateService_ReleaseStreamServer = grpc.ServerStreamingServer[ReleaseStreamResponse]

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequoia.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterManifest",
			Handler:    _UpdateService_RegisterManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReleaseStream",
			Handler:       _UpdateService_ReleaseStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "update_service.proto",
}
