// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: update_service.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceState int32

const (
	ServiceState_SERVICE_STATE_STOPPED ServiceState = 0
	ServiceState_SERVICE_STATE_RUNNING ServiceState = 1
)

// Enum value maps for ServiceState.
var (
	ServiceState_name = map[int32]string{
		0: "SERVICE_STATE_STOPPED",
		1: "SERVICE_STATE_RUNNING",
	}
	ServiceState_value = map[string]int32{
		"SERVICE_STATE_STOPPED": 0,
		"SERVICE_STATE_RUNNING": 1,
	}
)

func (x ServiceState) Enum() *ServiceState {
	p := new(ServiceState)
	*p = x
	return p
}

func (x ServiceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceState) Descriptor() protoreflect.EnumDescriptor {
	return file_update_service_proto_enumTypes[0].Descriptor()
}

func (ServiceState) Type() protoreflect.EnumType {
	return &file_update_service_proto_enumTypes[0]
}

func (x ServiceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceState.Descriptor instead.
func (ServiceState) EnumDescriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{0}
}

type ServiceAction int32

const (
	ServiceAction_SERVICE_ACTION_START ServiceAction = 0
	ServiceAction_SERVICE_ACTION_STOP  ServiceAction = 1
)

// Enum value maps for ServiceAction.
var (
	ServiceAction_name = map[int32]string{
		0: "SERVICE_ACTION_START",
		1: "SERVICE_ACTION_STOP",
	}
	ServiceAction_value = map[string]int32{
		"SERVICE_ACTION_START": 0,
		"SERVICE_ACTION_STOP":  1,
	}
)

func (x ServiceAction) Enum() *ServiceAction {
	p := new(ServiceAction)
	*p = x
	return p
}

func (x ServiceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_update_service_proto_enumTypes[1].Descriptor()
}

func (ServiceAction) Type() protoreflect.EnumType {
	return &file_update_service_proto_enumTypes[1]
}

func (x ServiceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceAction.Descriptor instead.
func (ServiceAction) EnumDescriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{1}
}

type RegisterManifestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Assets    []*Asset               `protobuf:"bytes,3,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *RegisterManifestRequest) Reset() {
	*x = RegisterManifestRequest{}
	mi := &file_update_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterManifestRequest) ProtoMessage() {}

func (x *RegisterManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterManifestRequest.ProtoReflect.Descriptor instead.
func (*RegisterManifestRequest) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterManifestRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterManifestRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RegisterManifestRequest) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type RegisterManifestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeToDocker   bool     `protobuf:"varint,1,opt,name=subscribe_to_docker,json=subscribeToDocker,proto3" json:"subscribe_to_docker,omitempty"`
	SubscribeToSystemd  bool     `protobuf:"varint,2,opt,name=subscribe_to_systemd,json=subscribeToSystemd,proto3" json:"subscribe_to_systemd,omitempty"`
	SubscribeToServices []string `protobuf:"bytes,3,rep,name=subscribe_to_services,json=subscribeToServices,proto3" json:"subscribe_to_services,omitempty"`
}

func (x *RegisterManifestResponse) Reset() {
	*x = RegisterManifestResponse{}
	mi := &file_update_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterManifestResponse) ProtoMessage() {}

func (x *RegisterManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterManifestResponse.ProtoReflect.Descriptor instead.
func (*RegisterManifestResponse) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterManifestResponse) GetSubscribeToDocker() bool {
	if x != nil {
		return x.SubscribeToDocker
	}
	return false
}

func (x *RegisterManifestResponse) GetSubscribeToSystemd() bool {
	if x != nil {
		return x.SubscribeToSystemd
	}
	return false
}

func (x *RegisterManifestResponse) GetSubscribeToServices() []string {
	if x != nil {
		return x.SubscribeToServices
	}
	return nil
}

type ReleaseStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *ReleaseStreamRequest) Reset() {
	*x = ReleaseStreamRequest{}
	mi := &file_update_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStreamRequest) ProtoMessage() {}

func (x *ReleaseStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStreamRequest.ProtoReflect.Descriptor instead.
func (*ReleaseStreamRequest) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReleaseStreamRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type ReleaseStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Release   *Release               `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReleaseStreamResponse) Reset() {
	*x = ReleaseStreamResponse{}
	mi := &file_update_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseStreamResponse) ProtoMessage() {}

func (x *ReleaseStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseStreamResponse.ProtoReflect.Descriptor instead.
func (*ReleaseStreamResponse) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReleaseStreamResponse) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *ReleaseStreamResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version        string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	RepositoryName string   `protobuf:"bytes,3,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	Assets         []*Asset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
	InstallCommand string   `protobuf:"bytes,5,opt,name=install_command,json=installCommand,proto3" json:"install_command,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	mi := &file_update_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{4}
}

func (x *Release) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Release) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Release) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *Release) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Release) GetInstallCommand() string {
	if x != nil {
		return x.InstallCommand
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceUrl string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_update_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{5}
}

func (x *Asset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Asset) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

type ServicesStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname    string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Services    []*ServiceStatus       `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	HostMetrics *HostMetrics           `protobuf:"bytes,4,opt,name=host_metrics,json=hostMetrics,proto3" json:"host_metrics,omitempty"`
}

func (x *ServicesStreamRequest) Reset() {
	*x = ServicesStreamRequest{}
	mi := &file_update_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesStreamRequest) ProtoMessage() {}

func (x *ServicesStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesStreamRequest.ProtoReflect.Descriptor instead.
func (*ServicesStreamRequest) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{6}
}

func (x *ServicesStreamRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ServicesStreamRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServicesStreamRequest) GetServices() []*ServiceStatus {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ServicesStreamRequest) GetHostMetrics() *HostMetrics {
	if x != nil {
		return x.HostMetrics
	}
	return nil
}

type ServicesStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName   string        `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceAction ServiceAction `protobuf:"varint,2,opt,name=service_action,json=serviceAction,proto3,enum=sequoia.ServiceAction" json:"service_action,omitempty"`
}

func (x *ServicesStreamResponse) Reset() {
	*x = ServicesStreamResponse{}
	mi := &file_update_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesStreamResponse) ProtoMessage() {}

func (x *ServicesStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesStreamResponse.ProtoReflect.Descriptor instead.
func (*ServicesStreamResponse) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{7}
}

func (x *ServicesStreamResponse) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServicesStreamResponse) GetServiceAction() ServiceAction {
	if x != nil {
		return x.ServiceAction
	}
	return ServiceAction_SERVICE_ACTION_START
}

type ServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metrics *ServiceMetrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Types that are assignable to Service:
	//
	//	*ServiceStatus_DockerService
	//	*ServiceStatus_SystemdService
	Service isServiceStatus_Service `protobuf_oneof:"service"`
}

func (x *ServiceStatus) Reset() {
	*x = ServiceStatus{}
	mi := &file_update_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStatus) ProtoMessage() {}

func (x *ServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStatus.ProtoReflect.Descriptor instead.
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStatus) GetMetrics() *ServiceMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (m *ServiceStatus) GetService() isServiceStatus_Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (x *ServiceStatus) GetDockerService() *ServiceDocker {
	if x, ok := x.GetService().(*ServiceStatus_DockerService); ok {
		return x.DockerService
	}
	return nil
}

func (x *ServiceStatus) GetSystemdService() *ServiceSystemd {
	if x, ok := x.GetService().(*ServiceStatus_SystemdService); ok {
		return x.SystemdService
	}
	return nil
}

type isServiceStatus_Service interface {
	isServiceStatus_Service()
}

type ServiceStatus_DockerService struct {
	DockerService *ServiceDocker `protobuf:"bytes,3,opt,name=docker_service,json=dockerService,proto3,oneof"`
}

type ServiceStatus_SystemdService struct {
	SystemdService *ServiceSystemd `protobuf:"bytes,4,opt,name=systemd_service,json=systemdService,proto3,oneof"`
}

func (*ServiceStatus_DockerService) isServiceStatus_Service() {}

func (*ServiceStatus_SystemdService) isServiceStatus_Service() {}

type ServiceDocker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Created int64    `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	Id      string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Image   string   `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	ImageID string   `protobuf:"bytes,5,opt,name=imageID,proto3" json:"imageID,omitempty"`
	Names   []string `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	Ports   []uint32 `protobuf:"varint,7,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	State   string   `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Status  string   `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ServiceDocker) Reset() {
	*x = ServiceDocker{}
	mi := &file_update_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceDocker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDocker) ProtoMessage() {}

func (x *ServiceDocker) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDocker.ProtoReflect.Descriptor instead.
func (*ServiceDocker) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceDocker) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ServiceDocker) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ServiceDocker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceDocker) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ServiceDocker) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *ServiceDocker) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ServiceDocker) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ServiceDocker) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ServiceDocker) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ServiceSystemd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoadState   string `protobuf:"bytes,3,opt,name=load_state,json=loadState,proto3" json:"load_state,omitempty"`
	ActiveState string `protobuf:"bytes,4,opt,name=active_state,json=activeState,proto3" json:"active_state,omitempty"`
	Path        string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ServiceSystemd) Reset() {
	*x = ServiceSystemd{}
	mi := &file_update_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSystemd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSystemd) ProtoMessage() {}

func (x *ServiceSystemd) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSystemd.ProtoReflect.Descriptor instead.
func (*ServiceSystemd) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceSystemd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceSystemd) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceSystemd) GetLoadState() string {
	if x != nil {
		return x.LoadState
	}
	return ""
}

func (x *ServiceSystemd) GetActiveState() string {
	if x != nil {
		return x.ActiveState
	}
	return ""
}

func (x *ServiceSystemd) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type HostMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage  float64 `protobuf:"fixed64,1,opt,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`
	MemUsage  float64 `protobuf:"fixed64,2,opt,name=MemUsage,proto3" json:"MemUsage,omitempty"`
	DiskUsage float64 `protobuf:"fixed64,3,opt,name=DiskUsage,proto3" json:"DiskUsage,omitempty"`
}

func (x *HostMetrics) Reset() {
	*x = HostMetrics{}
	mi := &file_update_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMetrics) ProtoMessage() {}

func (x *HostMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMetrics.ProtoReflect.Descriptor instead.
func (*HostMetrics) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{11}
}

func (x *HostMetrics) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *HostMetrics) GetMemUsage() float64 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *HostMetrics) GetDiskUsage() float64 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

type ServiceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceMetrics) Reset() {
	*x = ServiceMetrics{}
	mi := &file_update_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMetrics) ProtoMessage() {}

func (x *ServiceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_update_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMetrics.ProtoReflect.Descriptor instead.
func (*ServiceMetrics) Descriptor() ([]byte, []int) {
	return file_update_service_proto_rawDescGZIP(), []int{12}
}

var File_update_service_proto protoreflect.FileDescriptor

var file_update_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x32, 0x0a,
	0x14, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x7d, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65,
	0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xb1, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3a, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0xda, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x7a, 0x0a,
	0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x63, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2a, 0x44, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x42,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x01, 0x32, 0x91, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f,
	0x69, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1d,
	0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x55, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x71, 0x75, 0x6f, 0x69, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x70, 0x6f, 0x65, 0x67, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x71,
	0x75, 0x6f, 0x69, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_update_service_proto_rawDescOnce sync.Once
	file_update_service_proto_rawDescData = file_update_service_proto_rawDesc
)

func file_update_service_proto_rawDescGZIP() []byte {
	file_update_service_proto_rawDescOnce.Do(func() {
		file_update_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_update_service_proto_rawDescData)
	})
	return file_update_service_proto_rawDescData
}

var file_update_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_update_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_update_service_proto_goTypes = []any{
	(ServiceState)(0),                // 0: sequoia.ServiceState
	(ServiceAction)(0),               // 1: sequoia.ServiceAction
	(*RegisterManifestRequest)(nil),  // 2: sequoia.RegisterManifestRequest
	(*RegisterManifestResponse)(nil), // 3: sequoia.RegisterManifestResponse
	(*ReleaseStreamRequest)(nil),     // 4: sequoia.ReleaseStreamRequest
	(*ReleaseStreamResponse)(nil),    // 5: sequoia.ReleaseStreamResponse
	(*Release)(nil),                  // 6: sequoia.Release
	(*Asset)(nil),                    // 7: sequoia.Asset
	(*ServicesStreamRequest)(nil),    // 8: sequoia.ServicesStreamRequest
	(*ServicesStreamResponse)(nil),   // 9: sequoia.ServicesStreamResponse
	(*ServiceStatus)(nil),            // 10: sequoia.ServiceStatus
	(*ServiceDocker)(nil),            // 11: sequoia.ServiceDocker
	(*ServiceSystemd)(nil),           // 12: sequoia.ServiceSystemd
	(*HostMetrics)(nil),              // 13: sequoia.HostMetrics
	(*ServiceMetrics)(nil),           // 14: sequoia.ServiceMetrics
	(*timestamppb.Timestamp)(nil),    // 15: google.protobuf.Timestamp
}
var file_update_service_proto_depIdxs = []int32{
	15, // 0: sequoia.RegisterManifestRequest.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 1: sequoia.RegisterManifestRequest.assets:type_name -> sequoia.Asset
	6,  // 2: sequoia.ReleaseStreamResponse.release:type_name -> sequoia.Release
	15, // 3: sequoia.ReleaseStreamResponse.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 4: sequoia.Release.assets:type_name -> sequoia.Asset
	15, // 5: sequoia.ServicesStreamRequest.timestamp:type_name -> google.protobuf.Timestamp
	10, // 6: sequoia.ServicesStreamRequest.services:type_name -> sequoia.ServiceStatus
	13, // 7: sequoia.ServicesStreamRequest.host_metrics:type_name -> sequoia.HostMetrics
	1,  // 8: sequoia.ServicesStreamResponse.service_action:type_name -> sequoia.ServiceAction
	14, // 9: sequoia.ServiceStatus.metrics:type_name -> sequoia.ServiceMetrics
	11, // 10: sequoia.ServiceStatus.docker_service:type_name -> sequoia.ServiceDocker
	12, // 11: sequoia.ServiceStatus.systemd_service:type_name -> sequoia.ServiceSystemd
	2,  // 12: sequoia.UpdateService.RegisterManifest:input_type -> sequoia.RegisterManifestRequest
	4,  // 13: sequoia.UpdateService.ReleaseStream:input_type -> sequoia.ReleaseStreamRequest
	8,  // 14: sequoia.UpdateService.ServicesStream:input_type -> sequoia.ServicesStreamRequest
	3,  // 15: sequoia.UpdateService.RegisterManifest:output_type -> sequoia.RegisterManifestResponse
	5,  // 16: sequoia.UpdateService.ReleaseStream:output_type -> sequoia.ReleaseStreamResponse
	9,  // 17: sequoia.UpdateService.ServicesStream:output_type -> sequoia.ServicesStreamResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_update_service_proto_init() }
func file_update_service_proto_init() {
	if File_update_service_proto != nil {
		return
	}
	file_update_service_proto_msgTypes[8].OneofWrappers = []any{
		(*ServiceStatus_DockerService)(nil),
		(*ServiceStatus_SystemdService)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_update_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_update_service_proto_goTypes,
		DependencyIndexes: file_update_service_proto_depIdxs,
		EnumInfos:         file_update_service_proto_enumTypes,
		MessageInfos:      file_update_service_proto_msgTypes,
	}.Build()
	File_update_service_proto = out.File
	file_update_service_proto_rawDesc = nil
	file_update_service_proto_goTypes = nil
	file_update_service_proto_depIdxs = nil
}
