// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addAsset = `-- name: AddAsset :one
INSERT INTO assets (
  device_id, package_id, source_url, version
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, device_id, package_id, source_url, version
`

type AddAssetParams struct {
	DeviceID  int64
	PackageID int64
	SourceUrl sql.NullString
	Version   sql.NullString
}

func (q *Queries) AddAsset(ctx context.Context, arg AddAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, addAsset,
		arg.DeviceID,
		arg.PackageID,
		arg.SourceUrl,
		arg.Version,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.PackageID,
		&i.SourceUrl,
		&i.Version,
	)
	return i, err
}

const addDevice = `-- name: AddDevice :one
INSERT INTO devices (
  hostname
) VALUES (
  ?
)
RETURNING id, hostname
`

func (q *Queries) AddDevice(ctx context.Context, hostname string) (Device, error) {
	row := q.db.QueryRowContext(ctx, addDevice, hostname)
	var i Device
	err := row.Scan(&i.ID, &i.Hostname)
	return i, err
}

const addPackage = `-- name: AddPackage :one
INSERT INTO packages (
  name, install_cmd, update_cmd, remove_cmd
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, name, install_cmd, update_cmd, remove_cmd
`

type AddPackageParams struct {
	Name       string
	InstallCmd string
	UpdateCmd  string
	RemoveCmd  sql.NullString
}

func (q *Queries) AddPackage(ctx context.Context, arg AddPackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, addPackage,
		arg.Name,
		arg.InstallCmd,
		arg.UpdateCmd,
		arg.RemoveCmd,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InstallCmd,
		&i.UpdateCmd,
		&i.RemoveCmd,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = ?
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const deletePackage = `-- name: DeletePackage :exec
DELETE FROM packages
WHERE id = ?
`

func (q *Queries) DeletePackage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePackage, id)
	return err
}

const getSetting = `-- name: GetSetting :one
SELECT name, value FROM settings
WHERE name = ?
LIMIT 1
`

type GetSettingRow struct {
	Name  string
	Value string
}

func (q *Queries) GetSetting(ctx context.Context, name string) (GetSettingRow, error) {
	row := q.db.QueryRowContext(ctx, getSetting, name)
	var i GetSettingRow
	err := row.Scan(&i.Name, &i.Value)
	return i, err
}

const listAssets = `-- name: ListAssets :many
SELECT id, device_id, package_id, source_url, version FROM assets
ORDER BY id
`

func (q *Queries) ListAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssetsForPackage = `-- name: ListAssetsForPackage :many
SELECT id, device_id, package_id, source_url, version FROM assets
WHERE package_id = ?
ORDER BY id
`

func (q *Queries) ListAssetsForPackage(ctx context.Context, packageID int64) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssetsForPackage, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssetsOnDevice = `-- name: ListAssetsOnDevice :many
SELECT id, device_id, package_id, source_url, version FROM assets
WHERE device_id = ?
ORDER BY id
`

func (q *Queries) ListAssetsOnDevice(ctx context.Context, deviceID int64) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssetsOnDevice, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDevices = `-- name: ListDevices :many
SELECT id, hostname FROM devices
ORDER BY hostname
`

func (q *Queries) ListDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(&i.ID, &i.Hostname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackages = `-- name: ListPackages :many
SELECT id, name, install_cmd, update_cmd, remove_cmd FROM packages
ORDER BY name
`

func (q *Queries) ListPackages(ctx context.Context) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.InstallCmd,
			&i.UpdateCmd,
			&i.RemoveCmd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackage = `-- name: UpdatePackage :exec
UPDATE packages
set name = ?,
    install_cmd = ?,
    update_cmd = ?,
    remove_cmd = ?
WHERE id = ?
`

type UpdatePackageParams struct {
	Name       string
	InstallCmd string
	UpdateCmd  string
	RemoveCmd  sql.NullString
	ID         int64
}

func (q *Queries) UpdatePackage(ctx context.Context, arg UpdatePackageParams) error {
	_, err := q.db.ExecContext(ctx, updatePackage,
		arg.Name,
		arg.InstallCmd,
		arg.UpdateCmd,
		arg.RemoveCmd,
		arg.ID,
	)
	return err
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings
set value = ?
WHERE name = ?
`

type UpdateSettingParams struct {
	Value string
	Name  string
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Value, arg.Name)
	return err
}
