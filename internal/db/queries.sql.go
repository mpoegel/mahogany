// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addAsset = `-- name: AddAsset :one
INSERT INTO assets (
  device_id, package_id, source_url, version
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, device_id, package_id, source_url, version
`

type AddAssetParams struct {
	DeviceID  int64
	PackageID int64
	SourceUrl sql.NullString
	Version   sql.NullString
}

func (q *Queries) AddAsset(ctx context.Context, arg AddAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, addAsset,
		arg.DeviceID,
		arg.PackageID,
		arg.SourceUrl,
		arg.Version,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.PackageID,
		&i.SourceUrl,
		&i.Version,
	)
	return i, err
}

const addDevice = `-- name: AddDevice :one
INSERT INTO devices (
  hostname
) VALUES (
  ?
)
RETURNING id, hostname, tailscale_last_seen, agent_last_seen
`

func (q *Queries) AddDevice(ctx context.Context, hostname string) (Device, error) {
	row := q.db.QueryRowContext(ctx, addDevice, hostname)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Hostname,
		&i.TailscaleLastSeen,
		&i.AgentLastSeen,
	)
	return i, err
}

const addPackage = `-- name: AddPackage :one
INSERT INTO packages (
  name, install_cmd, update_cmd, remove_cmd
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, name, install_cmd, update_cmd, remove_cmd
`

type AddPackageParams struct {
	Name       string
	InstallCmd string
	UpdateCmd  string
	RemoveCmd  sql.NullString
}

func (q *Queries) AddPackage(ctx context.Context, arg AddPackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, addPackage,
		arg.Name,
		arg.InstallCmd,
		arg.UpdateCmd,
		arg.RemoveCmd,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InstallCmd,
		&i.UpdateCmd,
		&i.RemoveCmd,
	)
	return i, err
}

const addTrackedService = `-- name: AddTrackedService :one
INSERT INTO tracked_services (
  device_id, name, status, last_updated, container_id, container_image
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING id, device_id, name, status, last_updated, container_id, container_image
`

type AddTrackedServiceParams struct {
	DeviceID       int64
	Name           string
	Status         string
	LastUpdated    int64
	ContainerID    sql.NullString
	ContainerImage sql.NullString
}

func (q *Queries) AddTrackedService(ctx context.Context, arg AddTrackedServiceParams) (TrackedService, error) {
	row := q.db.QueryRowContext(ctx, addTrackedService,
		arg.DeviceID,
		arg.Name,
		arg.Status,
		arg.LastUpdated,
		arg.ContainerID,
		arg.ContainerImage,
	)
	var i TrackedService
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Name,
		&i.Status,
		&i.LastUpdated,
		&i.ContainerID,
		&i.ContainerImage,
	)
	return i, err
}

const addWatchedService = `-- name: AddWatchedService :exec
INSERT INTO watched_services (name) VALUES (?)
`

func (q *Queries) AddWatchedService(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addWatchedService, name)
	return err
}

const countDevices = `-- name: CountDevices :one
SELECT COUNT(*) FROM devices
`

func (q *Queries) CountDevices(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDevices)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = ?
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const deletePackage = `-- name: DeletePackage :exec
DELETE FROM packages
WHERE id = ?
`

func (q *Queries) DeletePackage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePackage, id)
	return err
}

const deleteTrackedService = `-- name: DeleteTrackedService :exec
DELETE FROM tracked_services WHERE id = ?
`

func (q *Queries) DeleteTrackedService(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrackedService, id)
	return err
}

const deleteWatchedService = `-- name: DeleteWatchedService :exec
DELETE FROM watched_services WHERE name = ?
`

func (q *Queries) DeleteWatchedService(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteWatchedService, name)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, hostname, tailscale_last_seen, agent_last_seen FROM devices
WHERE hostname = ?
`

func (q *Queries) GetDevice(ctx context.Context, hostname string) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDevice, hostname)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Hostname,
		&i.TailscaleLastSeen,
		&i.AgentLastSeen,
	)
	return i, err
}

const getSetting = `-- name: GetSetting :one
SELECT name, value FROM settings
WHERE name = ?
LIMIT 1
`

type GetSettingRow struct {
	Name  string
	Value string
}

func (q *Queries) GetSetting(ctx context.Context, name string) (GetSettingRow, error) {
	row := q.db.QueryRowContext(ctx, getSetting, name)
	var i GetSettingRow
	err := row.Scan(&i.Name, &i.Value)
	return i, err
}

const getTrackedServiceID = `-- name: GetTrackedServiceID :one
SELECT id FROM tracked_services WHERE name=? and device_id=?
`

type GetTrackedServiceIDParams struct {
	Name     string
	DeviceID int64
}

func (q *Queries) GetTrackedServiceID(ctx context.Context, arg GetTrackedServiceIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTrackedServiceID, arg.Name, arg.DeviceID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listAssets = `-- name: ListAssets :many
SELECT id, device_id, package_id, source_url, version FROM assets
ORDER BY id
`

func (q *Queries) ListAssets(ctx context.Context) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssetsForPackage = `-- name: ListAssetsForPackage :many
SELECT id, device_id, package_id, source_url, version FROM assets
WHERE package_id = ?
ORDER BY id
`

func (q *Queries) ListAssetsForPackage(ctx context.Context, packageID int64) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssetsForPackage, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAssetsOnDevice = `-- name: ListAssetsOnDevice :many
SELECT id, device_id, package_id, source_url, version FROM assets
WHERE device_id = ?
ORDER BY id
`

func (q *Queries) ListAssetsOnDevice(ctx context.Context, deviceID int64) ([]Asset, error) {
	rows, err := q.db.QueryContext(ctx, listAssetsOnDevice, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.PackageID,
			&i.SourceUrl,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDevices = `-- name: ListDevices :many
SELECT id, hostname, tailscale_last_seen, agent_last_seen FROM devices
ORDER BY hostname
`

func (q *Queries) ListDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Hostname,
			&i.TailscaleLastSeen,
			&i.AgentLastSeen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackages = `-- name: ListPackages :many
SELECT id, name, install_cmd, update_cmd, remove_cmd FROM packages
ORDER BY name
`

func (q *Queries) ListPackages(ctx context.Context) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.InstallCmd,
			&i.UpdateCmd,
			&i.RemoveCmd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSettings = `-- name: ListSettings :many
SELECT id, name, value FROM settings
ORDER BY id
`

func (q *Queries) ListSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, listSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrackedServices = `-- name: ListTrackedServices :many
SELECT id, device_id, name, status, last_updated, container_id, container_image FROM tracked_services ORDER BY (device_id, name)
`

func (q *Queries) ListTrackedServices(ctx context.Context) ([]TrackedService, error) {
	rows, err := q.db.QueryContext(ctx, listTrackedServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackedService
	for rows.Next() {
		var i TrackedService
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Name,
			&i.Status,
			&i.LastUpdated,
			&i.ContainerID,
			&i.ContainerImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWatchedServices = `-- name: ListWatchedServices :many
SELECT name FROM watched_services ORDER BY name
`

func (q *Queries) ListWatchedServices(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listWatchedServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices
SET tailscale_last_seen = ?,
    agent_last_seen = ?
WHERE hostname = ?
`

type UpdateDeviceParams struct {
	TailscaleLastSeen sql.NullInt64
	AgentLastSeen     sql.NullInt64
	Hostname          string
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.ExecContext(ctx, updateDevice, arg.TailscaleLastSeen, arg.AgentLastSeen, arg.Hostname)
	return err
}

const updatePackage = `-- name: UpdatePackage :exec
UPDATE packages
set name = ?,
    install_cmd = ?,
    update_cmd = ?,
    remove_cmd = ?
WHERE id = ?
`

type UpdatePackageParams struct {
	Name       string
	InstallCmd string
	UpdateCmd  string
	RemoveCmd  sql.NullString
	ID         int64
}

func (q *Queries) UpdatePackage(ctx context.Context, arg UpdatePackageParams) error {
	_, err := q.db.ExecContext(ctx, updatePackage,
		arg.Name,
		arg.InstallCmd,
		arg.UpdateCmd,
		arg.RemoveCmd,
		arg.ID,
	)
	return err
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings
set value = ?
WHERE name = ?
`

type UpdateSettingParams struct {
	Value string
	Name  string
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Value, arg.Name)
	return err
}

const updateTrackedService = `-- name: UpdateTrackedService :exec
UPDATE tracked_services
set status = ?,
    last_updated = ?
WHERE id = ?
`

type UpdateTrackedServiceParams struct {
	Status      string
	LastUpdated int64
	ID          int64
}

func (q *Queries) UpdateTrackedService(ctx context.Context, arg UpdateTrackedServiceParams) error {
	_, err := q.db.ExecContext(ctx, updateTrackedService, arg.Status, arg.LastUpdated, arg.ID)
	return err
}
